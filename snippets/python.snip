snippet #!
	#!/usr/bin/env python3

snippet from
	from ${1} import ${2}
snippet s
	self
snippet self
	self.${1:attr} = $1${2}
snippet .
	self.
snippet main
options head
	if __name__ == '__main__':
		${1}
# path
snippet op
	os.path.
snippet opa
	os.path.abspath(
snippet opd
	os.path.dirname(
snippet ope
	os.path.exists(
snippet opj
	os.path.join(
snippet opl
	os.path.islink(
snippet ops
	os.path.split(
snippet opu
	os.path.expanduser(
# __magic__
snippet _
	__${1:init}__(${2}
# tornado
snippet arg
	${1:arg} = self.get_argument('$1')${2}
# debug
snippet logger
	logger = logging.getLogger(__name__)
snippet ok
	print('Everything is ok.')
snippet dbg
	print('HereItIs.')
snippet cdb
	from cli import repl
	repl(locals())
snippet pdb
	import pudb; pu.db
snippet tb
	import traceback
	traceback.print_exc()
# other
snippet err
	file=sys.stderr
snippet usage
	print('用法: %s ${1}' % os.path.basename((sys.argv[0])))
	
snippet enc
	# vim:fileencoding=utf-8
snippet fpf
	from __future__ import print_function
snippet fdiv
	from __future__ import division
snippet fai
	from __future__ import absolute_import
snippet aa
	*args, **kwargs)
snippet yf
	yield from 
snippet mGP
	methods=['GET', 'POST']
snippet mP
	methods=['POST']

snippet utf
	# -*- coding: utf-8 -*-
snippet repl
	except Exception as e:
	    traceback.print_exc(file=sys.stderr)
	    _, value, tb = sys.exc_info()
	    traceback.print_exc()
	    last_frame = lambda tb=tb: last_frame(tb.tb_next) if tb.tb_next else tb
	    frame = last_frame().tb_frame
	    ns = dict(frame.f_globals)
	    ns.update(frame.f_locals)
	    import code
	    code.interact(local=ns)
